/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 08 17:59:39 GMT 2017
 */

package math.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import math.genetics.Chromosome;
import math.genetics.DummyListChromosome;
import math.genetics.DummyRandomKey;
import math.genetics.ElitisticListPopulation;
import math.genetics.RandomKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ListPopulation_ESTest extends ListPopulation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 59 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 6. math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true
   * Goal 7. math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true
   * Goal 8. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 9. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 10. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 11. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 18. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 19. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 20. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 21. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 22. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 175
   * Goal 23. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 178
   * Goal 24. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 181
   * Goal 25. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 182
   * Goal 26. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 27. [METHOD] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 28. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 29. [METHODNOEX] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 30. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 31. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 35. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 39. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 43. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 44. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 45. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 47. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 48. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   * Goal 49. Weak Mutation 72: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp Negation of populationLimit
   * Goal 50. Weak Mutation 73: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC 1 populationLimit
   * Goal 51. Weak Mutation 74: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC -1 populationLimit
   * Goal 52. Weak Mutation 75: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - ReplaceComparisonOperator > -> -2
   * Goal 53. Weak Mutation 81: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp Negation of populationLimit
   * Goal 54. Weak Mutation 82: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC 1 populationLimit
   * Goal 55. Weak Mutation 83: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC -1 populationLimit
   * Goal 56. Weak Mutation 85: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - ReplaceComparisonOperator >= -> >
   * Goal 57. Weak Mutation 91: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp Negation of populationLimit
   * Goal 58. Weak Mutation 92: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC 1 populationLimit
   * Goal 59. Weak Mutation 93: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      Integer[] integerArray0 = new Integer[0];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      elitisticListPopulation0.addChromosome(dummyListChromosome0);
      elitisticListPopulation0.setPopulationLimit(1);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 1
  /*
   * 40 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - false
   * Goal 6. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - false in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 7. setPopulationLimit(I)V_math.exception.NumberIsTooSmallException_DECLARED
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 175
   * Goal 17. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 176
   * Goal 18. [METHOD] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 72: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp Negation of populationLimit
   * Goal 35. Weak Mutation 73: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC 1 populationLimit
   * Goal 36. Weak Mutation 74: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC -1 populationLimit
   * Goal 37. Weak Mutation 76: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - ReplaceComparisonOperator > -> !=
   * Goal 38. Weak Mutation 78: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp Negation of populationLimit
   * Goal 39. Weak Mutation 79: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp IINC 1 populationLimit
   * Goal 40. Weak Mutation 80: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(127, 0.7926884526986379);
      try { 
        elitisticListPopulation0.setPopulationLimit((-1614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 2
  /*
   * 79 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true
   * Goal 6. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - true
   * Goal 7. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - false
   * Goal 8. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I27 Branch 9 IFLE L151 - true
   * Goal 9. math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true
   * Goal 10. math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true
   * Goal 11. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 12. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - true in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 13. Branch math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - false in context: math.genetics.ListPopulation:getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 14. Branch math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I27 Branch 9 IFLE L151 - true in context: math.genetics.ListPopulation:getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 15. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 16. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 17. getFittestChromosome()Lmath/genetics/Chromosome;_java.lang.NullPointerException_IMPLICIT
   * Goal 18. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 19. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 20. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 21. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 22. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 23. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 24. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 25. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 26. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 149
   * Goal 27. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 150
   * Goal 28. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 151
   * Goal 29. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 155
   * Goal 30. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 80
   * Goal 31. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 83
   * Goal 32. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 87
   * Goal 33. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 88
   * Goal 34. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 89
   * Goal 35. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 175
   * Goal 36. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 178
   * Goal 37. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 181
   * Goal 38. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 182
   * Goal 39. [METHOD] math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 40. [METHOD] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 41. [METHOD] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 42. [METHODNOEX] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 43. [METHODNOEX] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 44. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 45. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 46. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 47. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 48. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 49. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 50. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 51. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 52. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 53. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 54. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 55. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 56. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 57. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 58. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 59. Weak Mutation 26: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:80 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 27: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 28: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp +1
   * Goal 62. Weak Mutation 29: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp -1
   * Goal 63. Weak Mutation 32: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - ReplaceComparisonOperator <= -> ==
   * Goal 64. Weak Mutation 61: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:149 - ReplaceConstant - 0 -> 1
   * Goal 65. Weak Mutation 62: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:150 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 63: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:151 - ReplaceVariable chromosome -> bestChromosome
   * Goal 67. Weak Mutation 64: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:151 - ReplaceVariable bestChromosome -> chromosome
   * Goal 68. Weak Mutation 67: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:151 - ReplaceComparisonOperator <= -> <
   * Goal 69. Weak Mutation 72: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp Negation of populationLimit
   * Goal 70. Weak Mutation 73: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC 1 populationLimit
   * Goal 71. Weak Mutation 74: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC -1 populationLimit
   * Goal 72. Weak Mutation 75: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - ReplaceComparisonOperator > -> -2
   * Goal 73. Weak Mutation 81: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp Negation of populationLimit
   * Goal 74. Weak Mutation 82: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC 1 populationLimit
   * Goal 75. Weak Mutation 83: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC -1 populationLimit
   * Goal 76. Weak Mutation 86: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - ReplaceComparisonOperator >= -> ==
   * Goal 77. Weak Mutation 91: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp Negation of populationLimit
   * Goal 78. Weak Mutation 92: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC 1 populationLimit
   * Goal 79. Weak Mutation 93: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1.0);
      Integer[] integerArray0 = new Integer[1];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      elitisticListPopulation0.setPopulationLimit(1731);
      linkedList0.add((Chromosome) dummyListChromosome0);
      linkedList0.add((Chromosome) null);
      elitisticListPopulation0.setChromosomes(linkedList0);
      // Undeclared exception!
      try { 
        elitisticListPopulation0.getFittestChromosome();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 3
  /*
   * 51 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - true
   * Goal 6. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 7. Branch math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - true in context: math.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V
   * Goal 8. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 9. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 17. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 18. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 19. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 20. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 98
   * Goal 21. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 102
   * Goal 22. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 103
   * Goal 23. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 24. [METHOD] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 25. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 26. [METHODNOEX] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 27. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 28. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 32. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 33. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 34. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 35. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 36. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 37. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 38. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 39. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 37: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> %
   * Goal 43. Weak Mutation 40: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> /
   * Goal 44. Weak Mutation 41: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 42: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp +1
   * Goal 46. Weak Mutation 43: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp -1
   * Goal 47. Weak Mutation 45: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceComparisonOperator <= -> <
   * Goal 48. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      Integer[] integerArray0 = new Integer[0];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      elitisticListPopulation0.addChromosome(dummyListChromosome0);
      elitisticListPopulation0.addChromosomes(linkedList0);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 4
  /*
   * 43 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true
   * Goal 6. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - true
   * Goal 7. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 8. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - true in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 9. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 17. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 80
   * Goal 18. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 83
   * Goal 19. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 87
   * Goal 20. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 88
   * Goal 21. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 89
   * Goal 22. [METHOD] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 23. [METHODNOEX] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 24. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 25. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 26. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 27. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 28. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 29. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 30. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 31. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 32. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 33. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 34. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 35. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 36. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 37. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 38. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 39. Weak Mutation 26: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:80 - ReplaceComparisonOperator != null -> = null
   * Goal 40. Weak Mutation 27: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 28: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp +1
   * Goal 42. Weak Mutation 29: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp -1
   * Goal 43. Weak Mutation 31: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - ReplaceComparisonOperator <= -> <
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      Integer[] integerArray0 = new Integer[1];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      linkedList0.add((Chromosome) dummyListChromosome0);
      elitisticListPopulation0.setChromosomes(linkedList0);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 5
  /*
   * 25 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 6. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 7. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 8. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 11. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 12. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 13. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 14. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 15. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 16. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 17. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 18. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 19. Weak Mutation 14: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> <
   * Goal 20. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 24. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 25. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      linkedList0.add((Chromosome) dummyListChromosome0);
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, 1, (double) 1);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 6
  /*
   * 13 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - false
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 56
   * Goal 6. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 7. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 8. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 9. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 10. Weak Mutation 6: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> >=
   * Goal 11. Weak Mutation 7: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp Negation of populationLimit
   * Goal 12. Weak Mutation 8: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp IINC 1 populationLimit
   * Goal 13. Weak Mutation 9: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 7
  /*
   * 13 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - false
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 56
   * Goal 6. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 7. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 8. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 9. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 10. Weak Mutation 5: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> !=
   * Goal 11. Weak Mutation 7: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp Negation of populationLimit
   * Goal 12. Weak Mutation 8: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp IINC 1 populationLimit
   * Goal 13. Weak Mutation 9: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:56 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((-294), (-294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 8
  /*
   * 35 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.getChromosomes()Ljava/util/List;: root-Branch
   * Goal 3. math.genetics.ListPopulation.iterator()Ljava/util/Iterator;: root-Branch
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 6. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 7. Branch math.genetics.ListPopulation.iterator()Ljava/util/Iterator;: root-Branch in context: math.genetics.ListPopulation:iterator()Ljava/util/Iterator;
   * Goal 8. [Output]: math.genetics.ListPopulation.iterator()Ljava/util/Iterator;:NonNull
   * Goal 9. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 17. math.genetics.ListPopulation.getChromosomes()Ljava/util/List;: Line 110
   * Goal 18. math.genetics.ListPopulation.iterator()Ljava/util/Iterator;: Line 207
   * Goal 19. [METHOD] math.genetics.ListPopulation.iterator()Ljava/util/Iterator;
   * Goal 20. [METHODNOEX] math.genetics.ListPopulation.iterator()Ljava/util/Iterator;
   * Goal 21. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 22. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 23. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 24. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 25. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 26. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 27. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 28. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 29. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 30. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 31. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 32. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 33. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 34. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 35. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      elitisticListPopulation0.iterator();
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 9
  /*
   * 44 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.getPopulationSize()I: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 7. Branch math.genetics.ListPopulation.getPopulationSize()I: root-Branch in context: math.genetics.ListPopulation:getPopulationSize()I
   * Goal 8. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 9. [Output]: math.genetics.ListPopulation.getPopulationSize()I:Positive
   * Goal 10. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 18. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 19. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 20. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 21. math.genetics.ListPopulation.getPopulationSize()I: Line 189
   * Goal 22. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 23. [METHOD] math.genetics.ListPopulation.getPopulationSize()I
   * Goal 24. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 25. [METHODNOEX] math.genetics.ListPopulation.getPopulationSize()I
   * Goal 26. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 27. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 28. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 29. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 30. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 31. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 35. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 39. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 40. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 41. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 43. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 44. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(26, 0.0);
      List<Double> list0 = RandomKey.identityPermutation(26);
      DummyRandomKey dummyRandomKey0 = new DummyRandomKey(list0);
      elitisticListPopulation0.addChromosome(dummyRandomKey0);
      elitisticListPopulation0.getPopulationSize();
      assertEquals(26, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 10
  /*
   * 45 covered goals:
   * Goal 1. math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 7. Branch math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: root-Branch in context: 
   * Goal 8. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 9. [Output]: math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;:NonNull:java.util.List:isEmpty()Z:False
   * Goal 10. [Output]: math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;:NonNull:java.util.List:size()I:Positive
   * Goal 11. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 18. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 19. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 20. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 21. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 22. math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: Line 118
   * Goal 23. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 24. [METHOD] math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;
   * Goal 25. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 26. [METHODNOEX] math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;
   * Goal 27. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 28. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 32. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 33. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 34. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 35. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 36. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 37. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 38. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 39. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(15, 0.0);
      List<Double> list0 = RandomKey.identityPermutation(15);
      DummyRandomKey dummyRandomKey0 = new DummyRandomKey(list0);
      elitisticListPopulation0.addChromosome(dummyRandomKey0);
      elitisticListPopulation0.getChromosomeList();
      assertEquals(15, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 11
  /*
   * 30 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. addChromosomes(Ljava/util/Collection;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 7. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 8. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 14. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 98
   * Goal 15. [METHOD] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 16. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 17. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 18. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 19. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 20. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 21. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 22. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 23. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 24. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 25. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 26. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 27. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 28. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1.0);
      // Undeclared exception!
      try { 
        elitisticListPopulation0.addChromosomes((Collection<Chromosome>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 12
  /*
   * 32 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.getChromosomes()Ljava/util/List;: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. Branch math.genetics.ListPopulation.getChromosomes()Ljava/util/List;: root-Branch in context: math.genetics.ListPopulation:getChromosomes()Ljava/util/List;
   * Goal 7. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 8. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 15. math.genetics.ListPopulation.getChromosomes()Ljava/util/List;: Line 110
   * Goal 16. [METHOD] math.genetics.ListPopulation.getChromosomes()Ljava/util/List;
   * Goal 17. [METHODNOEX] math.genetics.ListPopulation.getChromosomes()Ljava/util/List;
   * Goal 18. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 19. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 20. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 21. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 22. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 23. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 24. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 25. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 26. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 27. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 28. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 29. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 30. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 31. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 32. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      elitisticListPopulation0.getChromosomes();
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 13
  /*
   * 36 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.getPopulationLimit()I: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. Branch math.genetics.ListPopulation.getPopulationLimit()I: root-Branch in context: math.genetics.ListPopulation:getPopulationLimit()I
   * Goal 7. [Output]: math.genetics.ListPopulation.getPopulationLimit()I:Positive
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.getPopulationLimit()I: Line 164
   * Goal 17. [METHOD] math.genetics.ListPopulation.getPopulationLimit()I
   * Goal 18. [METHODNOEX] math.genetics.ListPopulation.getPopulationLimit()I
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 69: math.genetics.ListPopulation.getPopulationLimit()I:164 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 70: math.genetics.ListPopulation.getPopulationLimit()I:164 - InsertUnaryOp +1
   * Goal 36. Weak Mutation 71: math.genetics.ListPopulation.getPopulationLimit()I:164 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      int int0 = elitisticListPopulation0.getPopulationLimit();
      assertEquals(1, int0);
  }

  //Test case number: 14
  /*
   * 68 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 6. math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true
   * Goal 7. math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true
   * Goal 8. math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - false
   * Goal 9. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 10. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 11. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - true in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 12. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I19 Branch 11 IF_ICMPGE L178 - false in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 13. setPopulationLimit(I)V_math.exception.MathIllegalNumberException_DECLARED
   * Goal 14. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 18. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 19. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 20. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 21. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 22. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 23. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 24. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 25. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 175
   * Goal 26. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 178
   * Goal 27. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 179
   * Goal 28. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 181
   * Goal 29. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 182
   * Goal 30. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 31. [METHOD] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 32. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 33. [METHODNOEX] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 34. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 39. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 43. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 44. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 45. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 46. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 47. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 48. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 49. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   * Goal 53. Weak Mutation 72: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp Negation of populationLimit
   * Goal 54. Weak Mutation 73: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC 1 populationLimit
   * Goal 55. Weak Mutation 74: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC -1 populationLimit
   * Goal 56. Weak Mutation 75: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - ReplaceComparisonOperator > -> -2
   * Goal 57. Weak Mutation 81: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp Negation of populationLimit
   * Goal 58. Weak Mutation 82: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC 1 populationLimit
   * Goal 59. Weak Mutation 83: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - InsertUnaryOp IINC -1 populationLimit
   * Goal 60. Weak Mutation 84: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - ReplaceComparisonOperator >= -> -1
   * Goal 61. Weak Mutation 86: math.genetics.ListPopulation.setPopulationLimit(I)V:178 - ReplaceComparisonOperator >= -> ==
   * Goal 62. Weak Mutation 87: math.genetics.ListPopulation.setPopulationLimit(I)V:179 - InsertUnaryOp Negation of populationLimit
   * Goal 63. Weak Mutation 88: math.genetics.ListPopulation.setPopulationLimit(I)V:179 - InsertUnaryOp IINC 1 populationLimit
   * Goal 64. Weak Mutation 89: math.genetics.ListPopulation.setPopulationLimit(I)V:179 - InsertUnaryOp IINC -1 populationLimit
   * Goal 65. Weak Mutation 90: math.genetics.ListPopulation.setPopulationLimit(I)V:179 - ReplaceConstant - 1 -> 0
   * Goal 66. Weak Mutation 91: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp Negation of populationLimit
   * Goal 67. Weak Mutation 92: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC 1 populationLimit
   * Goal 68. Weak Mutation 93: math.genetics.ListPopulation.setPopulationLimit(I)V:181 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1.0);
      elitisticListPopulation0.addChromosome((Chromosome) null);
      elitisticListPopulation0.setPopulationLimit(228);
      elitisticListPopulation0.addChromosome((Chromosome) null);
      try { 
        elitisticListPopulation0.setPopulationLimit(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than the minimum (2)
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 15
  /*
   * 40 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - false
   * Goal 6. Branch math.genetics.ListPopulation.setPopulationLimit(I)V: I3 Branch 10 IFGT L175 - false in context: math.genetics.ListPopulation:setPopulationLimit(I)V
   * Goal 7. setPopulationLimit(I)V_math.exception.NumberIsTooSmallException_DECLARED
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 175
   * Goal 17. math.genetics.ListPopulation.setPopulationLimit(I)V: Line 176
   * Goal 18. [METHOD] math.genetics.ListPopulation.setPopulationLimit(I)V
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 72: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp Negation of populationLimit
   * Goal 35. Weak Mutation 73: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC 1 populationLimit
   * Goal 36. Weak Mutation 74: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - InsertUnaryOp IINC -1 populationLimit
   * Goal 37. Weak Mutation 77: math.genetics.ListPopulation.setPopulationLimit(I)V:175 - ReplaceComparisonOperator > -> >=
   * Goal 38. Weak Mutation 78: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp Negation of populationLimit
   * Goal 39. Weak Mutation 79: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp IINC 1 populationLimit
   * Goal 40. Weak Mutation 80: math.genetics.ListPopulation.setPopulationLimit(I)V:176 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(2912, 0.9);
      try { 
        elitisticListPopulation0.setPopulationLimit(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 16
  /*
   * 55 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 6. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - true
   * Goal 7. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - false
   * Goal 8. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I27 Branch 9 IFLE L151 - true
   * Goal 9. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 10. Branch math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - true in context: math.genetics.ListPopulation:getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 11. Branch math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I17 Branch 8 IFEQ L150 - false in context: math.genetics.ListPopulation:getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 12. Branch math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: I27 Branch 9 IFLE L151 - true in context: math.genetics.ListPopulation:getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 13. [Output]: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:NonNull:math.genetics.Chromosome:fitness()D:Zero
   * Goal 14. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 18. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 19. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 20. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 21. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 22. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 23. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 24. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 25. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 149
   * Goal 26. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 150
   * Goal 27. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 151
   * Goal 28. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 155
   * Goal 29. math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;: Line 156
   * Goal 30. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 31. [METHOD] math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 32. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 33. [METHODNOEX] math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;
   * Goal 34. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 39. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 43. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 44. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 45. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 46. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 47. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 48. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 49. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   * Goal 53. Weak Mutation 61: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:149 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 62: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:150 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 67: math.genetics.ListPopulation.getFittestChromosome()Lmath/genetics/Chromosome;:151 - ReplaceComparisonOperator <= -> <
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      Integer[] integerArray0 = new Integer[0];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      elitisticListPopulation0.addChromosome(dummyListChromosome0);
      elitisticListPopulation0.getFittestChromosome();
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 17
  /*
   * 48 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 6. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - false
   * Goal 7. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 8. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - false in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 9. addChromosome(Lmath/genetics/Chromosome;)V_math.exception.MathIllegalNumberException_DECLARED
   * Goal 10. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 18. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 19. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 130
   * Goal 20. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 131
   * Goal 21. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 22. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 23. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 24. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 25. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 26. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 27. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 28. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 29. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 30. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 31. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 32. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 33. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 34. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 35. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 36. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 37. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 38. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 39. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 40. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 42. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 43. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   * Goal 44. Weak Mutation 56: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> <=
   * Goal 45. Weak Mutation 57: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:131 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 58: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:131 - InsertUnaryOp +1
   * Goal 47. Weak Mutation 59: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:131 - InsertUnaryOp -1
   * Goal 48. Weak Mutation 60: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:131 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      Integer[] integerArray0 = new Integer[0];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      elitisticListPopulation0.addChromosome(dummyListChromosome0);
      try { 
        elitisticListPopulation0.addChromosome(dummyListChromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 18
  /*
   * 64 covered goals:
   * Goal 1. math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - false
   * Goal 7. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true
   * Goal 8. Branch math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: root-Branch in context: 
   * Goal 9. Branch math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - false in context: math.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V
   * Goal 10. Branch math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: I7 Branch 7 IF_ICMPLT L129 - true in context: math.genetics.ListPopulation:addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 11. addChromosomes(Ljava/util/Collection;)V_math.exception.MathIllegalNumberException_DECLARED
   * Goal 12. [Output]: math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;:NonNull:java.util.List:isEmpty()Z:True
   * Goal 13. [Output]: math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;:NonNull:java.util.List:size()I:Zero
   * Goal 14. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 18. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 19. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 20. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 21. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 22. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 129
   * Goal 23. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 133
   * Goal 24. math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V: Line 134
   * Goal 25. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 98
   * Goal 26. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 99
   * Goal 27. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 100
   * Goal 28. math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;: Line 118
   * Goal 29. [METHOD] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 30. [METHOD] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 31. [METHOD] math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;
   * Goal 32. [METHODNOEX] math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V
   * Goal 33. [METHODNOEX] math.genetics.ListPopulation.getChromosomeList()Ljava/util/List;
   * Goal 34. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 39. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 40. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 41. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 42. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 43. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 44. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 45. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 46. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 47. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 48. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 49. Weak Mutation 37: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> %
   * Goal 50. Weak Mutation 38: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> -
   * Goal 51. Weak Mutation 39: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> *
   * Goal 52. Weak Mutation 40: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> /
   * Goal 53. Weak Mutation 41: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 42: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp +1
   * Goal 55. Weak Mutation 43: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp -1
   * Goal 56. Weak Mutation 44: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceComparisonOperator <= -> -1
   * Goal 57. Weak Mutation 47: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:100 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 48: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:100 - InsertUnaryOp +1
   * Goal 59. Weak Mutation 49: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:100 - InsertUnaryOp -1
   * Goal 60. Weak Mutation 50: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:100 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 51: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 52: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp +1
   * Goal 63. Weak Mutation 53: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - InsertUnaryOp -1
   * Goal 64. Weak Mutation 55: math.genetics.ListPopulation.addChromosome(Lmath/genetics/Chromosome;)V:129 - ReplaceComparisonOperator < -> -2
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomeList();
      Integer[] integerArray0 = new Integer[34];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      elitisticListPopulation0.addChromosome(dummyListChromosome0);
      try { 
        elitisticListPopulation0.addChromosomes(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 19
  /*
   * 40 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - true
   * Goal 6. Branch math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: I10 Branch 6 IF_ICMPLE L98 - true in context: math.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V
   * Goal 7. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 8. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 15. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 98
   * Goal 16. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 102
   * Goal 17. math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V: Line 103
   * Goal 18. [METHOD] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 19. [METHODNOEX] math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V
   * Goal 20. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 21. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 22. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 23. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 24. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 25. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 26. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 27. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 28. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 29. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 30. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 31. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 32. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 33. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 34. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 35. Weak Mutation 37: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> %
   * Goal 36. Weak Mutation 40: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceArithmeticOperator + -> /
   * Goal 37. Weak Mutation 41: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 42: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp +1
   * Goal 39. Weak Mutation 43: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - InsertUnaryOp -1
   * Goal 40. Weak Mutation 46: math.genetics.ListPopulation.addChromosomes(Ljava/util/Collection;)V:98 - ReplaceComparisonOperator <= -> ==
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      elitisticListPopulation0.addChromosomes(linkedList0);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 20
  /*
   * 46 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true
   * Goal 6. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - false
   * Goal 7. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - true in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 8. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I16 Branch 5 IF_ICMPLE L83 - false in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 9. setChromosomes(Ljava/util/List;)V_math.exception.MathIllegalNumberException_DECLARED
   * Goal 10. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 16. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 17. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 18. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 80
   * Goal 19. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 83
   * Goal 20. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 84
   * Goal 21. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 85
   * Goal 22. [METHOD] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 23. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 24. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 28. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 32. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 33. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 34. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 35. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 36. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 37. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 38. Weak Mutation 26: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:80 - ReplaceComparisonOperator != null -> = null
   * Goal 39. Weak Mutation 27: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 28: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp +1
   * Goal 41. Weak Mutation 29: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - InsertUnaryOp -1
   * Goal 42. Weak Mutation 30: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:83 - ReplaceComparisonOperator <= -> -1
   * Goal 43. Weak Mutation 33: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:85 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 34: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:85 - InsertUnaryOp +1
   * Goal 45. Weak Mutation 35: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:85 - InsertUnaryOp -1
   * Goal 46. Weak Mutation 36: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:85 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      Integer[] integerArray0 = new Integer[1];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      linkedList0.add((Chromosome) dummyListChromosome0);
      linkedList0.add((Chromosome) dummyListChromosome0);
      try { 
        elitisticListPopulation0.setChromosomes(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 21
  /*
   * 21 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - false
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 6. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 7. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 59
   * Goal 8. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 60
   * Goal 9. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 10. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 11. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 12. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 13. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 14. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 15. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 16. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 17. Weak Mutation 13: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> -1
   * Goal 18. Weak Mutation 16: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:60 - InsertUnaryOp Negation of populationLimit
   * Goal 19. Weak Mutation 17: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:60 - InsertUnaryOp IINC 1 populationLimit
   * Goal 20. Weak Mutation 18: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:60 - InsertUnaryOp IINC -1 populationLimit
   * Goal 21. Weak Mutation 19: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:60 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      DummyListChromosome dummyListChromosome0 = new DummyListChromosome(integerArray0);
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      linkedList0.add((Chromosome) dummyListChromosome0);
      linkedList0.add((Chromosome) dummyListChromosome0);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, 1, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 22
  /*
   * 34 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 5. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - false
   * Goal 6. Branch math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: I3 Branch 4 IFNONNULL L80 - false in context: math.genetics.ListPopulation:setChromosomes(Ljava/util/List;)V
   * Goal 7. setChromosomes(Ljava/util/List;)V_math.exception.MathIllegalArgumentException_DECLARED
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 80
   * Goal 17. math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V: Line 81
   * Goal 18. [METHOD] math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 26: math.genetics.ListPopulation.setChromosomes(Ljava/util/List;)V:80 - ReplaceComparisonOperator != null -> = null
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      try { 
        elitisticListPopulation0.setChromosomes((List<Chromosome>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - false
   * Goal 2. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 53
   * Goal 4. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   */

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) null, 2417, (double) 2417);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         assertThrownBy("math.genetics.ListPopulation", e);
      }
  }

  //Test case number: 24
  /*
   * 34 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.toString()Ljava/lang/String;: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. Branch math.genetics.ListPopulation.toString()Ljava/lang/String;: root-Branch in context: math.genetics.ListPopulation:toString()Ljava/lang/String;
   * Goal 7. [Output]: math.genetics.ListPopulation.toString()Ljava/lang/String;:NonEmptyString
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.toString()Ljava/lang/String;: Line 197
   * Goal 17. [METHOD] math.genetics.ListPopulation.toString()Ljava/lang/String;
   * Goal 18. [METHODNOEX] math.genetics.ListPopulation.toString()Ljava/lang/String;
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   * Goal 34. Weak Mutation 94: math.genetics.ListPopulation.toString()Ljava/lang/String;:197 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1.0);
      elitisticListPopulation0.toString();
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  //Test case number: 25
  /*
   * 33 covered goals:
   * Goal 1. math.genetics.ListPopulation.<init>(I)V: root-Branch
   * Goal 2. math.genetics.ListPopulation.getPopulationSize()I: root-Branch
   * Goal 3. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I7 Branch 1 IFNONNULL L52 - true
   * Goal 4. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I17 Branch 2 IFGT L55 - true
   * Goal 5. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: I32 Branch 3 IF_ICMPLE L58 - true
   * Goal 6. Branch math.genetics.ListPopulation.getPopulationSize()I: root-Branch in context: math.genetics.ListPopulation:getPopulationSize()I
   * Goal 7. [Output]: math.genetics.ListPopulation.getPopulationSize()I:Zero
   * Goal 8. math.genetics.ListPopulation.<init>(I)V: Line 36
   * Goal 9. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 52
   * Goal 10. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 55
   * Goal 11. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 58
   * Goal 12. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 62
   * Goal 13. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 63
   * Goal 14. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 64
   * Goal 15. math.genetics.ListPopulation.<init>(Ljava/util/List;I)V: Line 65
   * Goal 16. math.genetics.ListPopulation.getPopulationSize()I: Line 189
   * Goal 17. [METHOD] math.genetics.ListPopulation.getPopulationSize()I
   * Goal 18. [METHODNOEX] math.genetics.ListPopulation.getPopulationSize()I
   * Goal 19. Weak Mutation 0: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:52 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 1: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp Negation of populationLimit
   * Goal 21. Weak Mutation 2: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC 1 populationLimit
   * Goal 22. Weak Mutation 3: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - InsertUnaryOp IINC -1 populationLimit
   * Goal 23. Weak Mutation 4: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:55 - ReplaceComparisonOperator > -> -2
   * Goal 24. Weak Mutation 10: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp Negation of populationLimit
   * Goal 25. Weak Mutation 11: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC 1 populationLimit
   * Goal 26. Weak Mutation 12: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - InsertUnaryOp IINC -1 populationLimit
   * Goal 27. Weak Mutation 15: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:58 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp Negation of populationLimit
   * Goal 29. Weak Mutation 21: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC 1 populationLimit
   * Goal 30. Weak Mutation 22: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:62 - InsertUnaryOp IINC -1 populationLimit
   * Goal 31. Weak Mutation 23: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp Negation of populationLimit
   * Goal 32. Weak Mutation 24: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC 1 populationLimit
   * Goal 33. Weak Mutation 25: math.genetics.ListPopulation.<init>(Ljava/util/List;I)V:63 - InsertUnaryOp IINC -1 populationLimit
   */

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(26, 0.0);
      elitisticListPopulation0.getPopulationSize();
      assertEquals(26, elitisticListPopulation0.getPopulationLimit());
  }
}

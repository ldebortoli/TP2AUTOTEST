/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 08 16:00:02 GMT 2017
 */

package collections.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import collections.Predicate;
import collections.functors.TruePredicate;
import collections.functors.UniquePredicate;
import collections.iterators.FilterIterator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class FilterIterator_ESTest extends FilterIterator_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 17 covered goals:
   * Goal 1. collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: root-Branch
   * Goal 2. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch
   * Goal 3. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 4. Branch collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: root-Branch in context: collections.iterators.FilterIterator:getPredicate()Lcollections/Predicate;
   * Goal 5. [Output]: collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;:NonNull
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 57
   * Goal 10. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 58
   * Goal 11. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 59
   * Goal 12. collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: Line 140
   * Goal 13. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 14. [METHOD] collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;
   * Goal 15. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 16. [METHODNOEX] collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;
   * Goal 17. Weak Mutation 2: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V:24 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TruePredicate truePredicate0 = (TruePredicate)TruePredicate.INSTANCE;
      FilterIterator filterIterator0 = new FilterIterator((Iterator) null, (Predicate) truePredicate0);
      TruePredicate truePredicate1 = (TruePredicate)filterIterator0.getPredicate();
      assertSame(truePredicate0, truePredicate1);
  }

  //Test case number: 1
  /*
   * 15 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: root-Branch
   * Goal 3. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 4. Branch collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: root-Branch in context: collections.iterators.FilterIterator:getIterator()Ljava/util/Iterator;
   * Goal 5. [Output]: collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;:Null
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 10. collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: Line 118
   * Goal 11. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 12. [METHOD] collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;
   * Goal 13. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 14. [METHODNOEX] collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;
   * Goal 15. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      Iterator iterator0 = filterIterator0.getIterator();
      assertNull(iterator0);
  }

  //Test case number: 2
  /*
   * 18 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true
   * Goal 3. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;)V
   * Goal 4. Branch collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true in context: collections.iterators.FilterIterator:remove()V
   * Goal 5. remove()V_java.util.ConcurrentModificationException_IMPLICIT
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 45
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 46
   * Goal 10. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 11. collections.iterators.FilterIterator.remove()V: Line 105
   * Goal 12. collections.iterators.FilterIterator.remove()V: Line 108
   * Goal 13. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 14. [METHOD] collections.iterators.FilterIterator.remove()V
   * Goal 15. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 16. Weak Mutation 1: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V:24 - ReplaceConstant - 0 -> 1
   * Goal 17. Weak Mutation 10: collections.iterators.FilterIterator.remove()V:105 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 11: collections.iterators.FilterIterator.remove()V:105 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      linkedList0.clear();
      FilterIterator filterIterator0 = new FilterIterator((Iterator) listIterator0);
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  //Test case number: 3
  /*
   * 17 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true
   * Goal 3. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 4. Branch collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true in context: collections.iterators.FilterIterator:remove()V
   * Goal 5. remove()V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 10. collections.iterators.FilterIterator.remove()V: Line 105
   * Goal 11. collections.iterators.FilterIterator.remove()V: Line 108
   * Goal 12. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 13. [METHOD] collections.iterators.FilterIterator.remove()V
   * Goal 14. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 15. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 10: collections.iterators.FilterIterator.remove()V:105 - InsertUnaryOp Negation
   * Goal 17. Weak Mutation 11: collections.iterators.FilterIterator.remove()V:105 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("collections.iterators.FilterIterator", e);
      }
  }

  //Test case number: 4
  /*
   * 32 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: root-Branch
   * Goal 3. collections.iterators.FilterIterator.hasNext()Z: I4 Branch 1 IFEQ L69 - true
   * Goal 4. collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - false
   * Goal 5. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 6. Branch collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: root-Branch in context: collections.iterators.FilterIterator:setIterator(Ljava/util/Iterator;)V
   * Goal 7. Branch collections.iterators.FilterIterator.hasNext()Z: I4 Branch 1 IFEQ L69 - true in context: collections.iterators.FilterIterator:hasNext()Z
   * Goal 8. Branch collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - false in context: 
   * Goal 9. hasNext()Z_java.lang.NullPointerException_IMPLICIT
   * Goal 10. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 11. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 12. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 13. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 14. collections.iterators.FilterIterator.hasNext()Z: Line 69
   * Goal 15. collections.iterators.FilterIterator.hasNext()Z: Line 72
   * Goal 16. collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: Line 128
   * Goal 17. collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: Line 129
   * Goal 18. collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: Line 130
   * Goal 19. collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V: Line 131
   * Goal 20. collections.iterators.FilterIterator.setNextObject()Z: Line 164
   * Goal 21. collections.iterators.FilterIterator.setNextObject()Z: Line 165
   * Goal 22. collections.iterators.FilterIterator.setNextObject()Z: Line 166
   * Goal 23. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 24. [METHOD] collections.iterators.FilterIterator.hasNext()Z
   * Goal 25. [METHOD] collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V
   * Goal 26. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 27. [METHODNOEX] collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V
   * Goal 28. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 3: collections.iterators.FilterIterator.hasNext()Z:69 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 4: collections.iterators.FilterIterator.hasNext()Z:69 - ReplaceComparisonOperator == -> !=
   * Goal 31. Weak Mutation 14: collections.iterators.FilterIterator.setIterator(Ljava/util/Iterator;)V:130 - ReplaceConstant - 0 -> 1
   * Goal 32. Weak Mutation 16: collections.iterators.FilterIterator.setNextObject()Z:164 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      filterIterator0.setIterator(listIterator0);
      // Undeclared exception!
      try { 
        filterIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("collections.iterators.FilterIterator", e);
      }
  }

  //Test case number: 5
  /*
   * 19 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true
   * Goal 3. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 4. Branch collections.iterators.FilterIterator.remove()V: I4 Branch 4 IFEQ L105 - true in context: collections.iterators.FilterIterator:remove()V
   * Goal 5. remove()V_java.lang.IllegalStateException_IMPLICIT
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 57
   * Goal 10. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 58
   * Goal 11. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 59
   * Goal 12. collections.iterators.FilterIterator.remove()V: Line 105
   * Goal 13. collections.iterators.FilterIterator.remove()V: Line 108
   * Goal 14. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 15. [METHOD] collections.iterators.FilterIterator.remove()V
   * Goal 16. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 17. Weak Mutation 2: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V:24 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 10: collections.iterators.FilterIterator.remove()V:105 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 11: collections.iterators.FilterIterator.remove()V:105 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      UniquePredicate uniquePredicate0 = new UniquePredicate();
      FilterIterator filterIterator0 = new FilterIterator((Iterator) listIterator0, (Predicate) uniquePredicate0);
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  //Test case number: 6
  /*
   * 29 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.next()Ljava/lang/Object;: I4 Branch 2 IFNE L87 - false
   * Goal 3. collections.iterators.FilterIterator.next()Ljava/lang/Object;: I9 Branch 3 IFNE L88 - false
   * Goal 4. collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - true
   * Goal 5. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 6. Branch collections.iterators.FilterIterator.next()Ljava/lang/Object;: I4 Branch 2 IFNE L87 - false in context: collections.iterators.FilterIterator:next()Ljava/lang/Object;
   * Goal 7. Branch collections.iterators.FilterIterator.next()Ljava/lang/Object;: I9 Branch 3 IFNE L88 - false in context: collections.iterators.FilterIterator:next()Ljava/lang/Object;
   * Goal 8. Branch collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - true in context: 
   * Goal 9. next()Ljava/lang/Object;_java.util.NoSuchElementException_EXPLICIT
   * Goal 10. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 11. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 12. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 13. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 57
   * Goal 14. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 58
   * Goal 15. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 59
   * Goal 16. collections.iterators.FilterIterator.next()Ljava/lang/Object;: Line 87
   * Goal 17. collections.iterators.FilterIterator.next()Ljava/lang/Object;: Line 88
   * Goal 18. collections.iterators.FilterIterator.next()Ljava/lang/Object;: Line 89
   * Goal 19. collections.iterators.FilterIterator.setNextObject()Z: Line 164
   * Goal 20. collections.iterators.FilterIterator.setNextObject()Z: Line 172
   * Goal 21. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 22. [METHOD] collections.iterators.FilterIterator.next()Ljava/lang/Object;
   * Goal 23. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V
   * Goal 24. Weak Mutation 2: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V:24 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 6: collections.iterators.FilterIterator.next()Ljava/lang/Object;:87 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 7: collections.iterators.FilterIterator.next()Ljava/lang/Object;:87 - ReplaceComparisonOperator != -> ==
   * Goal 27. Weak Mutation 8: collections.iterators.FilterIterator.next()Ljava/lang/Object;:88 - ReplaceComparisonOperator != -> ==
   * Goal 28. Weak Mutation 16: collections.iterators.FilterIterator.setNextObject()Z:164 - ReplaceComparisonOperator == -> !=
   * Goal 29. Weak Mutation 20: collections.iterators.FilterIterator.setNextObject()Z:172 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      UniquePredicate uniquePredicate0 = new UniquePredicate();
      FilterIterator filterIterator0 = new FilterIterator((Iterator) listIterator0, (Predicate) uniquePredicate0);
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("collections.iterators.FilterIterator", e);
      }
  }

  //Test case number: 7
  /*
   * 18 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.next()Ljava/lang/Object;: I4 Branch 2 IFNE L87 - false
   * Goal 3. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 4. Branch collections.iterators.FilterIterator.next()Ljava/lang/Object;: I4 Branch 2 IFNE L87 - false in context: collections.iterators.FilterIterator:next()Ljava/lang/Object;
   * Goal 5. next()Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 10. collections.iterators.FilterIterator.next()Ljava/lang/Object;: Line 87
   * Goal 11. collections.iterators.FilterIterator.next()Ljava/lang/Object;: Line 88
   * Goal 12. collections.iterators.FilterIterator.setNextObject()Z: Line 164
   * Goal 13. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 14. [METHOD] collections.iterators.FilterIterator.next()Ljava/lang/Object;
   * Goal 15. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 16. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   * Goal 17. Weak Mutation 6: collections.iterators.FilterIterator.next()Ljava/lang/Object;:87 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 7: collections.iterators.FilterIterator.next()Ljava/lang/Object;:87 - ReplaceComparisonOperator != -> ==
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("collections.iterators.FilterIterator", e);
      }
  }

  //Test case number: 8
  /*
   * 25 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.hasNext()Z: I4 Branch 1 IFEQ L69 - true
   * Goal 3. collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - true
   * Goal 4. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;)V
   * Goal 5. Branch collections.iterators.FilterIterator.hasNext()Z: I4 Branch 1 IFEQ L69 - true in context: collections.iterators.FilterIterator:hasNext()Z
   * Goal 6. Branch collections.iterators.FilterIterator.setNextObject()Z: I5 Branch 5 IFEQ L164 - true in context: 
   * Goal 7. [Output]: collections.iterators.FilterIterator.hasNext()Z:False
   * Goal 8. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 10. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 45
   * Goal 11. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 46
   * Goal 12. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 13. collections.iterators.FilterIterator.hasNext()Z: Line 69
   * Goal 14. collections.iterators.FilterIterator.hasNext()Z: Line 72
   * Goal 15. collections.iterators.FilterIterator.setNextObject()Z: Line 164
   * Goal 16. collections.iterators.FilterIterator.setNextObject()Z: Line 172
   * Goal 17. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 18. [METHOD] collections.iterators.FilterIterator.hasNext()Z
   * Goal 19. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 20. [METHODNOEX] collections.iterators.FilterIterator.hasNext()Z
   * Goal 21. Weak Mutation 1: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V:24 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 3: collections.iterators.FilterIterator.hasNext()Z:69 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 4: collections.iterators.FilterIterator.hasNext()Z:69 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 16: collections.iterators.FilterIterator.setNextObject()Z:164 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 20: collections.iterators.FilterIterator.setNextObject()Z:172 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      FilterIterator filterIterator0 = new FilterIterator((Iterator) listIterator0);
      boolean boolean0 = filterIterator0.hasNext();
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 18 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: root-Branch
   * Goal 3. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 4. Branch collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: root-Branch in context: collections.iterators.FilterIterator:setPredicate(Lcollections/Predicate;)V
   * Goal 5. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 7. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: Line 150
   * Goal 10. collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: Line 151
   * Goal 11. collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: Line 152
   * Goal 12. collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V: Line 153
   * Goal 13. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 14. [METHOD] collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V
   * Goal 15. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 16. [METHODNOEX] collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V
   * Goal 17. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 15: collections.iterators.FilterIterator.setPredicate(Lcollections/Predicate;)V:152 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      UniquePredicate uniquePredicate0 = new UniquePredicate();
      filterIterator0.setPredicate(uniquePredicate0);
  }

  //Test case number: 10
  /*
   * 16 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: root-Branch
   * Goal 3. Branch collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: root-Branch in context: collections.iterators.FilterIterator:getIterator()Ljava/util/Iterator;
   * Goal 4. Branch collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: root-Branch in context: collections.iterators.FilterIterator:<init>(Ljava/util/Iterator;)V
   * Goal 5. [Output]: collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;:NonNull
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 45
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 46
   * Goal 10. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 11. collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;: Line 118
   * Goal 12. [METHOD] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 13. [METHOD] collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;
   * Goal 14. [METHODNOEX] collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V
   * Goal 15. [METHODNOEX] collections.iterators.FilterIterator.getIterator()Ljava/util/Iterator;
   * Goal 16. Weak Mutation 1: collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V:24 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      FilterIterator filterIterator0 = new FilterIterator((Iterator) listIterator0);
      Iterator iterator0 = filterIterator0.getIterator();
      assertNotNull(iterator0);
  }

  //Test case number: 11
  /*
   * 15 covered goals:
   * Goal 1. collections.iterators.FilterIterator.<init>()V: root-Branch
   * Goal 2. collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: root-Branch
   * Goal 3. Branch collections.iterators.FilterIterator.<init>()V: root-Branch in context: collections.iterators.FilterIterator:<init>()V
   * Goal 4. Branch collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: root-Branch in context: collections.iterators.FilterIterator:getPredicate()Lcollections/Predicate;
   * Goal 5. [Output]: collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;:Null
   * Goal 6. collections.iterators.FilterIterator.<init>()V: Line 24
   * Goal 7. collections.iterators.FilterIterator.<init>()V: Line 34
   * Goal 8. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;)V: Line 24
   * Goal 9. collections.iterators.FilterIterator.<init>(Ljava/util/Iterator;Lcollections/Predicate;)V: Line 24
   * Goal 10. collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;: Line 140
   * Goal 11. [METHOD] collections.iterators.FilterIterator.<init>()V
   * Goal 12. [METHOD] collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;
   * Goal 13. [METHODNOEX] collections.iterators.FilterIterator.<init>()V
   * Goal 14. [METHODNOEX] collections.iterators.FilterIterator.getPredicate()Lcollections/Predicate;
   * Goal 15. Weak Mutation 0: collections.iterators.FilterIterator.<init>()V:24 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterIterator filterIterator0 = new FilterIterator();
      TruePredicate truePredicate0 = (TruePredicate)filterIterator0.getPredicate();
      assertNull(truePredicate0);
  }
}
